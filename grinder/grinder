#! /usr/bin/env python
import configparser
import git
import os

origdir = os.getcwd()

# Source configuration
conf = configparser.ConfigParser()
conf.read("conf/grinder.conf")

def lsremote(url):
  remote_refs = {}
  g = git.cmd.Git()
  for ref in g.ls_remote(url).split('\n'):
    hash_ref_list = ref.split('\t')
    remote_refs[hash_ref_list[1]] = hash_ref_list[0]
  return remote_refs

def clonestates(url, basedir, branch):
  targetdir = basedir + "/" + branch + "/states"
  arguments = "-b " + branch + "--depth 0"
  g = git.cmd.Git()
  g.clone_from(url, targetdir, progress=None, env=None, branch_path=branch, depth=0)

def clonepillar(url, basedir, branch):
  targetdir = basedir + "/" + branch + "/pillar"
  arguments = "-b " + branch + "--depth 0"
  g = git.cmd.Git()
  g.clone_from(url, targetdir, progress=None, env=None, branch_path=branch, depth=0)

print("Configuration loaded.")
print("Base directory for environments:  " + str(conf['environment']['environmentdir']))
print("Remote Salt States repository:  " + str(conf['environment']['statesrepo']))
print("Remote Pillar repository:  " + str(conf['environment']['pillarrepo']))

# Read repository master branches
statebranches = lsremote(conf['environment']['statesrepo'])
pillarbranches = lsremote(conf['environment']['pillarrepo'])

# Make directory structure for the branch
print("Branches of Salt States:  ")
for key in statebranches:
  if key != "HEAD":
    branch = key.split('/')[-1]
    print(branch)
    try:
      os.makedirs(conf['environment']['environmentdir'] + "/" + branch, 0o755)

      # Clone branch
      clonestates(conf['environment']['statesrepo'], conf['environment']['environmentdir'], branch)

    except:
      pass

print("Branches of Pillar:  ")
for key in pillarbranches:
  if key != "HEAD":
    branch = key.split('/')[-1]
    print(branch)
    try:
      os.makedirs(conf['environment']['environmentdir'] + "/" + branch, 0o755)

      # Clone branch
      clonepillar(conf['environment']['pillarrepo'], conf['environment']['environmentdir'], branch)

    except:
      pass
